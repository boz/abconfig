---

- name: install pigz (aur)
  pacman:
    name: pigz
  become: true
  when: ansible_pkg_mgr == "pacman"
  tags: [bootstrap,package-manager,pigz]

- name: optimize makepkg - parallel make (aur)
  lineinfile:
    line: MAKEFLAGS="-j$(nproc)"
    path: /etc/makepkg.conf
    regexp: ^#?MAKEFLAGS=
  become: true
  when: ansible_pkg_mgr == "pacman"
  tags: [bootstrap,package-manager,makepkg]

- name: optimize makepkg - parallel xz (aur)
  lineinfile:
    line: COMPRESSXZ=(xz -c -z - --threads=0)
    path: /etc/makepkg.conf
    regexp: ^COMPRESSXZ=
  become: true
  when: ansible_pkg_mgr == "pacman"
  tags: [bootstrap,package-manager,makepkg]

- name: optimize makepkg - parallel gz (aur)
  lineinfile:
    line: COMPRESSGZ=(pigz -c -f -n)
    path: /etc/makepkg.conf
    regexp: ^COMPRESSGZ=
  become: true
  when: ansible_pkg_mgr == "pacman"
  tags: [bootstrap,package-manager,makepkg]

- name: base-devel (aur)
  pacman:
    name: base-devel
  become: true
  when: ansible_pkg_mgr == "pacman"
  tags: [bootstrap,package-manager,base-devel]

- name: linux-headers (aur)
  pacman:
    name: linux-headers
  become: true
  when: ansible_pkg_mgr == "pacman"
  tags: [bootstrap,package-manager,linux-headers]

- name: create aur directory
  file:
    path: "{{homedir}}/aur"
    state: directory
  when: ansible_pkg_mgr == "pacman"
  tags: [bootstrap,package-manager]

- name: install pacaur
  aur: name={{item}} user={{ansible_user_id}} skip_pgp=yes
  with_items:
    - cower
    - pacaur-git
  when: ansible_pkg_mgr == "pacman"
  tags: [bootstrap,package-manager]

# - name: install mas
#   homebrew:
#     name: mas
#   when: ansible_pkg_mgr == "homebrew"
#   tags: [bootstrap,package-manager,mas]

# copied from https://github.com/geerlingguy/ansible-role-mas/blob/master/tasks/main.yml
# - name: Get MAS account status
#   shell: 'mas account'
#   register: mas_account_result
#   failed_when: mas_account_result.rc > 1
#   changed_when: false
#   when: ansible_pkg_mgr == "homebrew"
#   tags: [bootstrap,package-manager,mas]

# - name: Sign in to MAS when email and password are provided.
#   shell: 'mas signin "{{ mas_email }}" "{{ mas_password }}"'
#   register: mas_signin_result
#   when: ansible_pkg_mgr == "homebrew" and mas_account_result.rc == 1 and mas_email != '' and mas_password != '' and not mas_signin_dialog
#   tags: [bootstrap,package-manager,mas]

# - name: List installed MAS apps.
#   command: mas list
#   register: mas_list
#   check_mode: no
#   changed_when: false
#   when: ansible_pkg_mgr == "homebrew"
#   tags: [bootstrap,package-manager,mas]
